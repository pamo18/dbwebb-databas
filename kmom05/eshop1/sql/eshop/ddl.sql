-- MySQL Script generated by MySQL Workbench
-- Tue Feb 26 15:43:09 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema eshop
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema eshop
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `eshop` DEFAULT CHARACTER SET utf8 COLLATE utf8_swedish_ci ;
USE `eshop` ;

-- -----------------------------------------------------
-- Table `eshop`.`produkt`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`produkt` ;

CREATE TABLE IF NOT EXISTS `eshop`.`produkt` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `namn` VARCHAR(45) NOT NULL,
  `pris` DECIMAL(18,2) NOT NULL,
  `bild_lank` VARCHAR(45) NULL,
  `beskrivning` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`kategori`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`kategori` ;

CREATE TABLE IF NOT EXISTS `eshop`.`kategori` (
  `typ` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`typ`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`kund`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`kund` ;

CREATE TABLE IF NOT EXISTS `eshop`.`kund` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fornamn` VARCHAR(45) NOT NULL,
  `efternamn` VARCHAR(45) NOT NULL,
  `adress` VARCHAR(45) NULL,
  `postnummer` VARCHAR(45) NULL,
  `ort` VARCHAR(45) NULL,
  `land` VARCHAR(45) NULL,
  `telefon` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`order` ;

CREATE TABLE IF NOT EXISTS `eshop`.`order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `kund_id` INT NOT NULL,
  `produkt_id` INT NOT NULL,
  `antal` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `kund_id_idx` (`kund_id` ASC) VISIBLE,
  INDEX `produkt_id_idx` (`produkt_id` ASC) VISIBLE,
  CONSTRAINT `kund_id_order`
    FOREIGN KEY (`kund_id`)
    REFERENCES `eshop`.`kund` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `produkt_id_order`
    FOREIGN KEY (`produkt_id`)
    REFERENCES `eshop`.`produkt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`lager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`lager` ;

CREATE TABLE IF NOT EXISTS `eshop`.`lager` (
  `hylla` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`hylla`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`plocklista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`plocklista` ;

CREATE TABLE IF NOT EXISTS `eshop`.`plocklista` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `order_id` INT NOT NULL,
  `hylla` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `order_id_idx` (`order_id` ASC) VISIBLE,
  INDEX `hylla_id_pl_idx` (`hylla` ASC) VISIBLE,
  CONSTRAINT `order_id_pl`
    FOREIGN KEY (`order_id`)
    REFERENCES `eshop`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `hylla_pl`
    FOREIGN KEY (`hylla`)
    REFERENCES `eshop`.`lager` (`hylla`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`leverans`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`leverans` ;

CREATE TABLE IF NOT EXISTS `eshop`.`leverans` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `order_id` INT NOT NULL,
  `total` DECIMAL(18,2) NOT NULL,
  `pris` DECIMAL(18,2) NOT NULL,
  `faktura` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  INDEX `order_id_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `order_id_lv`
    FOREIGN KEY (`order_id`)
    REFERENCES `eshop`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`logg`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`logg` ;

CREATE TABLE IF NOT EXISTS `eshop`.`logg` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tid` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `handelse` TEXT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`produkt2kund`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`produkt2kund` ;

CREATE TABLE IF NOT EXISTS `eshop`.`produkt2kund` (
  `produkt_id` INT NOT NULL,
  `kund_id` INT NOT NULL,
  INDEX `produkt_id_idx` (`produkt_id` ASC) VISIBLE,
  INDEX `kund_id_idx` (`kund_id` ASC) VISIBLE,
  CONSTRAINT `produkt_id_pk`
    FOREIGN KEY (`produkt_id`)
    REFERENCES `eshop`.`produkt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `kund_id_pk`
    FOREIGN KEY (`kund_id`)
    REFERENCES `eshop`.`kund` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`order2produkt`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`order2produkt` ;

CREATE TABLE IF NOT EXISTS `eshop`.`order2produkt` (
  `produkt_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  INDEX `produkt_id_idx` (`produkt_id` ASC) VISIBLE,
  INDEX `order_id_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `produkt_id_op`
    FOREIGN KEY (`produkt_id`)
    REFERENCES `eshop`.`produkt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `order_id_op`
    FOREIGN KEY (`order_id`)
    REFERENCES `eshop`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`produkt2kategori`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`produkt2kategori` ;

CREATE TABLE IF NOT EXISTS `eshop`.`produkt2kategori` (
  `produkt_id_kat` INT NOT NULL,
  `kategori` VARCHAR(45) NOT NULL,
  INDEX `produkt_id_pkat_idx` (`produkt_id_kat` ASC) VISIBLE,
  INDEX `kategori_typ_pkat_idx` (`kategori` ASC) VISIBLE,
  CONSTRAINT `produkt_id_pkat`
    FOREIGN KEY (`produkt_id_kat`)
    REFERENCES `eshop`.`produkt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `kategori_pkat`
    FOREIGN KEY (`kategori`)
    REFERENCES `eshop`.`kategori` (`typ`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `eshop`.`produkt2lager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `eshop`.`produkt2lager` ;

CREATE TABLE IF NOT EXISTS `eshop`.`produkt2lager` (
  `produkt_id_lag` INT NOT NULL,
  `antal` INT NULL,
  `hylla_id` VARCHAR(45) NOT NULL,
  INDEX `produkt_id_lager_idx` (`produkt_id_lag` ASC) VISIBLE,
  INDEX `hylla_id_lager_idx` (`hylla_id` ASC) VISIBLE,
  CONSTRAINT `produkt_id_lager`
    FOREIGN KEY (`produkt_id_lag`)
    REFERENCES `eshop`.`produkt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `hylla_id_lager`
    FOREIGN KEY (`hylla_id`)
    REFERENCES `eshop`.`lager` (`hylla`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

--
-- Views
--
DROP VIEW IF EXISTS v_produkt;

CREATE VIEW v_produkt
AS
SELECT
id,
namn,
pris,
bild_lank,
beskrivning,
GROUP_CONCAT(DISTINCT produkt2kategori.kategori SEPARATOR ', ') AS Kategorier,
GROUP_CONCAT(DISTINCT produkt2lager.hylla_id, '(', antal, ')' SEPARATOR ', ') AS Hylla,
(SELECT sum(antal) FROM produkt2lager WHERE produkt_id_lag = id GROUP BY produkt_id_lag) AS Lagersaldo

FROM produkt

LEFT OUTER JOIN produkt2lager
ON  produkt.id = produkt2lager.produkt_id_lag

LEFT OUTER JOIN produkt2kategori
ON  produkt.id = produkt2kategori.produkt_id_kat

GROUP BY id;

--
-- Create procedures
--
DROP PROCEDURE IF EXISTS create_kund;
DELIMITER ;;
CREATE PROCEDURE create_kund(
    a_fornamn VARCHAR(45),
    a_efternamn VARCHAR(45),
    a_adress VARCHAR(45),
    a_postnummer VARCHAR(45),
    a_ort VARCHAR(45),
    a_land VARCHAR(45),
    a_telefon VARCHAR(45)
)
BEGIN
    INSERT INTO kund VALUES (
        a_fornamn,
        a_efternamn,
        a_adress,
        a_postnummer,
        a_ort,
        a_land,
        a_telefon
    );
END
;;
DELIMITER ;

--
-- Create new product
--
DROP PROCEDURE IF EXISTS create_product;
DELIMITER ;;
CREATE PROCEDURE create_product(
    a_namn VARCHAR(45),
    a_pris DECIMAL(18,2),
    a_bild_lank VARCHAR(45),
    a_beskrivning VARCHAR(45)
)
BEGIN
    INSERT INTO produkt (namn, pris, bild_lank, beskrivning) VALUES (
        a_namn,
        a_pris,
        a_bild_lank,
        a_beskrivning
    );
END
;;
DELIMITER ;

--
-- show produkt table
--
DROP PROCEDURE IF EXISTS show_produkt_table;
DELIMITER ;;
CREATE PROCEDURE show_produkt_table()
BEGIN
    SELECT * FROM produkt;
END
;;
DELIMITER ;

--
-- Update a product
--
DROP PROCEDURE IF EXISTS update_product;
DELIMITER ;;
CREATE PROCEDURE update_product(
    a_id INT,
    a_namn VARCHAR(45),
    a_pris DECIMAL(18,2),
    a_bild_lank VARCHAR(45),
    a_beskrivning VARCHAR(45)
)
BEGIN
    UPDATE produkt
    SET
        namn = a_namn,
        pris = a_pris,
        bild_lank = a_bild_lank,
        beskrivning = a_beskrivning
    WHERE
        id = a_id;
END
;;
DELIMITER ;

--
-- Delete product
--
DROP PROCEDURE IF EXISTS delete_product;
DELIMITER ;;
CREATE PROCEDURE delete_product(a_product_id INT)
BEGIN
    DELETE FROM produkt2kategori WHERE produkt_id_kat = a_product_id;
    DELETE FROM produkt2lager WHERE produkt_id_lag = a_product_id;
    DELETE FROM produkt WHERE id = a_product_id;
END
;;
DELIMITER ;

--
-- show specific produkt
--
DROP PROCEDURE IF EXISTS show_produkt_info;
DELIMITER ;;
CREATE PROCEDURE show_produkt_info(product_id INT)
BEGIN
    SELECT * FROM produkt WHERE id = product_id;
END
;;
DELIMITER ;

--
-- show categories
--
DROP PROCEDURE IF EXISTS show_categories;
DELIMITER ;;
CREATE PROCEDURE show_categories()
BEGIN
    SELECT * FROM kategori;
END
;;
DELIMITER ;

--
-- show products
--
DROP PROCEDURE IF EXISTS show_products;
DELIMITER ;;
CREATE PROCEDURE show_products()
BEGIN
    SELECT * FROM v_produkt;
END
;;
DELIMITER ;

--
-- show log with limit
--
DROP PROCEDURE IF EXISTS show_log;
DELIMITER ;;
CREATE PROCEDURE show_log(_num INT)
BEGIN
    SELECT id, DATE_FORMAT(tid, '%Y-%m-%d %H:%i:%s') AS 'Time', handelse FROM logg
    ORDER BY id DESC
    LIMIT _num;
END
;;
DELIMITER ;

--
-- show available shelves
--
DROP PROCEDURE IF EXISTS show_shelf;
DELIMITER ;;
CREATE PROCEDURE show_shelf()
BEGIN
    SELECT * FROM lager
    ORDER BY hylla;
END
;;
DELIMITER ;

--
-- show inventory
--
DROP PROCEDURE IF EXISTS show_inventory;
DELIMITER ;;
CREATE PROCEDURE show_inventory()
BEGIN
    SELECT id, namn, Hylla, Lagersaldo FROM v_produkt;
END
;;
DELIMITER ;

--
-- show product inventory
--
DROP PROCEDURE IF EXISTS filter_inventory;
DELIMITER ;;
CREATE PROCEDURE filter_inventory(_fltr VARCHAR(45))
BEGIN
    SELECT id, namn, Hylla, Lagersaldo
    FROM v_produkt
    WHERE id = _fltr OR namn LIKE CONCAT('%',_fltr,'%')  OR Hylla = _fltr;
END
;;
DELIMITER ;

--
-- add inventory
--
DROP PROCEDURE IF EXISTS add_inv;
DELIMITER ;;
CREATE PROCEDURE add_inv(
    _id INT,
    _hylla_id VARCHAR(45),
    _antal INT)
BEGIN
    IF (
        SELECT antal
        FROM produkt2lager
        WHERE produkt_id_lag = _id AND hylla_id = _hylla_id)

        THEN
        UPDATE produkt2lager
        SET antal = antal + _antal
        WHERE produkt_id_lag = _id AND hylla_id = _hylla_id;

        ELSE
        INSERT INTO produkt2lager
        VALUES(_id, _antal, _hylla_id);
	END IF;
END
;;
DELIMITER ;

--
-- del inventory
--
DROP PROCEDURE IF EXISTS del_inv;
DELIMITER ;;
CREATE PROCEDURE del_inv(
    _id INT,
    _hylla_id VARCHAR(45),
    _antal INT)
BEGIN
    IF (
        (SELECT antal
        FROM produkt2lager
        WHERE produkt_id_lag = _id AND hylla_id = _hylla_id) - _antal <= 0)

        THEN
        DELETE FROM produkt2lager
        WHERE produkt_id_lag = _id AND hylla_id = _hylla_id;

        ELSE
        UPDATE produkt2lager
        SET antal = antal - _antal
        WHERE produkt_id_lag = _id AND hylla_id = _hylla_id;
    END IF;
END
;;
DELIMITER ;

--
-- Triggers
--
DROP TRIGGER IF EXISTS log_product_insert;
DROP TRIGGER IF EXISTS log_lager_insert;
DROP TRIGGER IF EXISTS log_product_update;
DROP TRIGGER IF EXISTS log_lager_update;
DROP TRIGGER IF EXISTS log_product_delete;
DROP TRIGGER IF EXISTS log_lager_delete;

CREATE TRIGGER log_product_insert
AFTER INSERT
ON produkt FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT('Product inserted: ', NEW.namn, ', pris: ', NEW.pris));

CREATE TRIGGER log_lager_insert
AFTER INSERT
ON produkt2lager FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT(
            'Inventory added: ',
            NEW.produkt_id_lag,
            ', quantity: ',
            NEW.antal,
            ' on shelf ',
            NEW.hylla_id));

CREATE TRIGGER log_product_update
AFTER UPDATE
ON produkt FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT(
            'Product updated, Before: id = ',
            OLD.id,
            ', ',
            OLD.namn,
            ', ',
            OLD.pris,
            ', ',
            ' After: id = ',
            NEW.id,
            ', ',
            NEW.namn,
            ', ',
            NEW.pris
        ));

CREATE TRIGGER log_lager_update
AFTER UPDATE
ON produkt2lager FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT(
            'Inventory updated: ',
            NEW.produkt_id_lag,
            ', quantity: ',
            NEW.antal - OLD.antal,
            ' on shelf ',
            NEW.hylla_id));

CREATE TRIGGER log_product_delete
AFTER DELETE
ON produkt FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT('Product deleted: ', OLD.namn));

CREATE TRIGGER log_lager_delete
AFTER DELETE
ON produkt2lager FOR EACH ROW
    INSERT INTO logg (`handelse`)
        VALUES (CONCAT(
            'Shelf ', OLD.hylla_id,
            ' inventory deleted for product id: ',
            OLD.produkt_id_lag));
